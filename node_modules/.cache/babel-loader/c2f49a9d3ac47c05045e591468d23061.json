{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from 'react';\n\nconst useInputValidity = validityFn => {\n  _s();\n\n  const [enteredInput, setEnteredInput] = useState('');\n  const [isTouched, setIsTouched] = useState(false);\n  const isInputValid = validityFn(enteredInput);\n  const hasError = !isInputValid && !isTouched;\n\n  const inputChangehandler = ev => {\n    setEnteredInput(ev.target.value);\n  };\n\n  const inputBlurhandler = ev => {\n    setIsTouched(true);\n  };\n\n  const resetInput = () => {\n    setIsTouched(false);\n    setEnteredInput('');\n  };\n\n  return {\n    enteredInput,\n    isInputValid,\n    hasError,\n    inputChangehandler,\n    inputBlurhandler,\n    resetInput\n  };\n};\n\n_s(useInputValidity, \"9Cr8XGkj/WSqRAVxiiJy7jxT4OI=\");\n\nexport default useInputValidity;","map":{"version":3,"sources":["/Users/poojapasupu/Documents/react_workspace/food-order-app-forms-13/src/components/UI/use-inputValidity.js"],"names":["React","useInputValidity","validityFn","enteredInput","setEnteredInput","useState","isTouched","setIsTouched","isInputValid","hasError","inputChangehandler","ev","target","value","inputBlurhandler","resetInput"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,gBAAgB,GAAIC,UAAD,IAAgB;AAAA;;AACrC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCC,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BF,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMG,YAAY,GAAGN,UAAU,CAACC,YAAD,CAA/B;AACA,QAAMM,QAAQ,GAAG,CAACD,YAAD,IAAiB,CAACF,SAAnC;;AAEA,QAAMI,kBAAkB,GAAIC,EAAD,IAAQ;AAC/BP,IAAAA,eAAe,CAACO,EAAE,CAACC,MAAH,CAAUC,KAAX,CAAf;AACH,GAFD;;AAKA,QAAMC,gBAAgB,GAAIH,EAAD,IAAQ;AAC7BJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAFD;;AAIA,QAAMQ,UAAU,GAAG,MAAK;AACpBR,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAH,IAAAA,eAAe,CAAC,EAAD,CAAf;AACH,GAHD;;AAOA,SAAO;AACHD,IAAAA,YADG;AAEHK,IAAAA,YAFG;AAGHC,IAAAA,QAHG;AAIHC,IAAAA,kBAJG;AAKHI,IAAAA,gBALG;AAMHC,IAAAA;AANG,GAAP;AASH,CAhCD;;GAAMd,gB;;AAkCN,eAAeA,gBAAf","sourcesContent":["import React from 'react';\n\nconst useInputValidity = (validityFn) => {\n    const [enteredInput, setEnteredInput] = useState('');\n    const [isTouched, setIsTouched] = useState(false);\n\n    const isInputValid = validityFn(enteredInput);\n    const hasError = !isInputValid && !isTouched;\n\n    const inputChangehandler = (ev) => {\n        setEnteredInput(ev.target.value);\n    };\n\n\n    const inputBlurhandler = (ev) => {\n        setIsTouched(true);\n    };\n\n    const resetInput = () =>{\n        setIsTouched(false);\n        setEnteredInput('');\n    };\n\n\n\n    return {\n        enteredInput,\n        isInputValid,\n        hasError,\n        inputChangehandler,\n        inputBlurhandler,\n        resetInput\n    };\n    \n};\n\nexport default useInputValidity;"]},"metadata":{},"sourceType":"module"}